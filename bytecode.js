const calculate = (input) => {
    const bytecode = [];

    for(let i=2; i<input.length; i+=2)
        bytecode.push(input.slice(i, i+2))

    const bytecodeLength = bytecode.length;
    console.log(`Bytecode length: ${bytecodeLength}`);

    const zeroBytesArray = bytecode.filter((x) => x == '00');

    const zeroBytes = zeroBytesArray.length;
    const nonZeroBytes = bytecodeLength - zeroBytes;

    console.log(`Num of zero bytes: ${zeroBytes}\nNum of non-zero bytes: ${nonZeroBytes}`);

    let index = bytecode.indexOf('fe');
    let runtime = bytecode.slice(index + 1);

    const runtimeLength = runtime.length;
    console.log(`Runtime length: ${runtimeLength}`);

    const result = zeroBytes*4 + nonZeroBytes*16 + runtimeLength*200;

    console.log(`Total cost: ${zeroBytes}*4 + ${nonZeroBytes}*16 + ${runtimeLength}*200 = ${result}`);
    console.log(`+ 6*SSTORE + 32.000 = ${result + 6*22100 + 32000}`);
}

let bytecode = '0x608060405234801561001057600080fd5b506040516106d73803806106d78339818101604052810190610032919061019b565b606481111580156100435750600081115b61004c57600080fd5b8282101561005957600080fd5b8560008190555084600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550826003819055508160048190555080600581905550505050505050610228565b600080fd5b6000819050919050565b61011a81610107565b811461012557600080fd5b50565b60008151905061013781610111565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006101688261013d565b9050919050565b6101788161015d565b811461018357600080fd5b50565b6000815190506101958161016f565b92915050565b60008060008060008060c087890312156101b8576101b7610102565b5b60006101c689828a01610128565b96505060206101d789828a01610186565b95505060406101e889828a01610186565b94505060606101f989828a01610128565b935050608061020a89828a01610128565b92505060a061021b89828a01610128565b9150509295509295509295565b6104a0806102376000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80638da5cb5b1161005b5780638da5cb5b14610103578063b3cea21714610121578063be040fb01461013f578063c78ad77f1461014957610088565b80631d1438481461008d5780633197cbb6146100ab5780635c5204d6146100c957806378e97925146100e5575b600080fd5b610095610167565b6040516100a2919061038e565b60405180910390f35b6100b361018d565b6040516100c091906103c2565b60405180910390f35b6100e360048036038101906100de919061040e565b610193565b005b6100ed61026c565b6040516100fa91906103c2565b60405180910390f35b61010b610272565b604051610118919061038e565b60405180910390f35b610129610298565b60405161013691906103c2565b60405180910390f35b61014761029e565b005b610151610347565b60405161015e91906103c2565b60405180910390f35b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60045481565b3373ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146101f1576101f061043b565b5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fbc48fdaddfcfb54d36a0ac4d7e52f46cdf854784b9c0978d385a35e8383262d481604051610261919061038e565b60405180910390a150565b60035481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60005481565b3373ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146102fc576102fb61043b565b5b42600354111561030b57600080fd5b42600454101561031a57600080fd5b610345600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610193565b565b60055481565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006103788261034d565b9050919050565b6103888161036d565b82525050565b60006020820190506103a3600083018461037f565b92915050565b6000819050919050565b6103bc816103a9565b82525050565b60006020820190506103d760008301846103b3565b92915050565b600080fd5b6103eb8161036d565b81146103f657600080fd5b50565b600081359050610408816103e2565b92915050565b600060208284031215610424576104236103dd565b5b6000610432848285016103f9565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fdfea2646970667358221220314ca01855a2cfc68f6ca17748639ba9e786bcc1badf76554783ca83be1e344564736f6c63430008130033'

calculate(bytecode);